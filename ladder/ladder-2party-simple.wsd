title Simple Call Flow
set autonumber true

participant Alice's Turn as TurnA
participant Alice's Browser as A
participant Alice's App as AppA
participant Alice as Alice
participant Alice's Web Server as WebA
participant Bob's Web Server as WebB
participant Bob as Bob
participant Bob's App as AppB
participant Bob's Browser as B
participant Bob's Turn as TurnB

A <-> WebA: Load Page 
A <-> WebA: Authenticate


B <-> WebB: Load Page 
B <-> WebB: Authenticate

Alice -> AppA: Call Bob 
AppA -> A: new RTCPeerConnection()

AppA -> A: createDataChannel()
AppA -> A: addTrack(track, stream)
A -> AppA: event: "negotiationneeded"
AppA -> A: createOffer(gotOffer)

A -> AppA: callback: gotOffer(offer)
AppA -> A: setLocalDescription(offer)
A -> TurnA: Alloc
TurnA -> A: IPs and Ports
sendOffer: AppA -> WebA: offer  [duration=0]
WebA@sendOffer -> WebB: offer  [duration=0]
WebB@sendOffer -> AppB: offer

AppB <-> AppB: config.iceTransportPolicy = "relay"
AppB -> B: new RTCPeerConnection(config)
AppB -> B: setRemoteDescription(offer)
B -> AppB: event: "track" with remoteTrack
AppB -> Bob: Phones Ringing Dude
AppB -> B: createAnswer(gotAnswer)
B -> AppB: callback: gotAnswer(answer)
AppB <-> AppB: answer.type = "pranswer"; pranswer = answer
AppB -> B: setLocalDescription(pranswer)
B -> TurnB: Alloc
TurnB -> B: IPs and Ports
sendPrAns: AppB -> WebB: pranswer
B@sendPrAns -> TurnB: Permission

WebB@sendPrAns -> WebA: pranswer [duration=0]
WebA@sendPrAns -> AppA: pranswer  [duration=0]
AppA -> A: setRemoteDescription(pranswer)
A -> TurnA: Permission

B <-> TurnB: ICE Check
TurnB <-> A: ICE Check 
B <-> TurnB: DTLS
TurnB <-> A: DTLS
B <-> TurnB: SCTP/Data
TurnB <-> A: SCTP/Data
B -> AppB: event: "datachannel"

Bob -> AppB: Accept Audio and Video 
AppB -> B: addTrack(track, stream)
AppB -> B: createAnswer(gotAnswer)

B -> AppB: callback: gotAnswer(answer)
AppB -> B: setLocalDescription(answer)
sendAns:AppB -> WebB: answer

B <-> TurnB: SRTP
TurnB <-> A: SRTP 
B <-> A: ICE Check
B <-> A: SRTP without relay

WebB@sendAns -> WebA: answer [duration=5]
WebA -> AppA: answer
AppA -> A: setRemoteDescription(answer)
A -> AppA: event: "track" with remoteTrack

Bob -> AppB: Add document camera
AppB -> B: addTrack(docTrack, docStream)
B -> AppB: event: "negotationneeded"
AppB -> B: createOffer(gotOffer)
B -> AppB: callback: gotOffer(offer)
AppB -> B: setLocalDescription(offer)
send2:AppB -> WebB: offer
WebB@send2 -> WebA: offer
WebA@send2 -> AppA: offer
AppA -> A: setRemoteDescription(offer)
A -> AppA: event: "track" with docTrack
AppA -> A: createAnswer(gotAnswer)
A -> AppA: callback: gotAnswer(answer)
send3:AppA -> WebA: answer
WebA@send3 -> WebB: answer
WebB@send3 -> AppB: answer
AppB -> B: setRemoteDescription(answer);

